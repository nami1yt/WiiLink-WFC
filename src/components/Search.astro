<div
  style="left:0; width:calc(100% + 53px); display:flex; align-items:center; justify-content:center; flex-direction:row; position:relative;"
>
  <input
    type="text"
    id="game-search-online"
    placeholder="ï€‚   Search for any title..."
    style="font-family:system-ui, FontAwesome"
  />
</div>
<div id="suggestions-online"></div>

<script type="module" src="/js/helper_functions.js"></script>
<script type="module" is:inline>
  import { loadImage } from "/js/helper_functions.js";
  const gameSearchInput = document.getElementById("game-search-online");
  const suggestionsDiv = document.getElementById("suggestions-online");

  gameSearchInput.addEventListener("input", function () {
    fetchQuery();
  });

  gameSearchInput.addEventListener("keydown", function (e) {
    if (e.key === "Enter") {
      e.preventDefault();
      const firstSuggestion = document.querySelector("#suggestionitem");
      if (firstSuggestion) {
        window.location.href = firstSuggestion.getAttribute("href");
      }
    }
  });

  // Hide suggestions when the input loses focus
  gameSearchInput.addEventListener("blur", function () {
    setTimeout(() => {
      suggestionsDiv.style.maxHeight = "0px";
      suggestionsDiv.style.visibility = "hidden";
      suggestionsDiv.style.overflowY = "hidden";
      suggestionsDiv.style.transition =
        "max-height 0.3s ease, visibility 0.3s ease";
    }, 200); // Delay to allow clicks on suggestions
  });

  // Show suggestions when the input gains focus
  gameSearchInput.addEventListener("focus", function () {
    if (suggestionsDiv.innerHTML.trim() !== "") {
      suggestionsDiv.style.maxHeight = "500px";
      suggestionsDiv.style.visibility = "visible";
      suggestionsDiv.style.overflowY = "auto";
      suggestionsDiv.style.transition =
        "max-height 0.3s ease, visibility 0.3s ease";
    }
  });

  async function fetchQuery() {
    const inputText = gameSearchInput.value.trim().toLowerCase();
    if (!inputText) {
      suggestionsDiv.innerHTML = "";
      suggestionsDiv.style.maxHeight = "0px";
      suggestionsDiv.style.visibility = "hidden";
      suggestionsDiv.style.overflowY = "hidden";
      return;
    }

    try {
      const response = await fetch("../../json/pages.json");
      const games = await response.json();

      const filteredGames = games.filter((game) => {
        const isWii = game.gamespyId?.length === 6;
        const isDS = game.gamespyId?.length === 4;
        const matchesSearch =
          game.gameName.toLowerCase().includes(inputText) ||
          game.gameId?.toLowerCase().includes(inputText);

        return matchesSearch && (isWii || isDS);
      });

      renderSuggestions(filteredGames);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  }

  function renderSuggestions(games) {
    if (games.length === 0) {
      suggestionsDiv.innerHTML =
        "<center style='margin-top:18px; font-size:48px; color:white;'><i class='fa fa-heart-broken'></i><br><p style='font-size:28px;'>No results found</p><p style='width:70%; font-size:18px; transform:translate(0, -10px); opacity:0.7;'>Try making an exact search quoting (&quot; &quot;) your query, or searching by gameID.</p></center>";
      suggestionsDiv.style.maxHeight = "500px";
      suggestionsDiv.style.visibility = "visible";
      suggestionsDiv.style.overflowY = "auto";
      suggestionsDiv.style.transition =
        "max-height 0.3s ease, visibility 0.3s ease";
      return;
    }

    const suggestionsHTML = games
      .slice(0, 10) // Limit to 10 results for performance
      .map((game) => {
        const discImage = game.gamespyId || game.gameId;
        const region = getRegionBadge(game.gameId);

        return `
          <a href="/online/${game.gameId}" id="suggestionitem" style="width:95%; height:100px; margin:10px; border-radius:8px; color:white; text-decoration:none; display:flex; align-items:center; justify-content:space-between; flex-direction:row; overflow:hidden; position:relative;">
            <img src="${loadImage("cover", discImage)}" onerror="this.onerror=null; this.src='/img/disc_placeholder.png';" style="filter:blur(8px) opacity(0.1); position:absolute;" width="100%">
            <img src="${loadImage("disc", discImage)}" onerror="this.onerror=null; this.src='/img/disc_placeholder.png';" style="margin-left:20px; margin-right:15px; border-radius:8px;" width="70px;">
            <div style="width:70%; margin-right:20px; font-size:30px; white-space:nowrap; text-overflow:ellipsis; line-height:30px; text-align:right; overflow:hidden;">
              ${game.gameName}<br>
              <i style="display:flex; align-items:center; justify-content:end; gap:10px; font-size:20px; opacity:0.7;">
                ${region}${game.gameId} | ${game.gamespyId}
              </i>
            </div>
          </a>`;
      })
      .join("");

    suggestionsDiv.innerHTML = suggestionsHTML;
    suggestionsDiv.style.maxHeight = "500px";
    suggestionsDiv.style.visibility = "visible";
    suggestionsDiv.style.overflowY = "auto";
    suggestionsDiv.style.transition =
      "max-height 0.3s ease, visibility 0.3s ease";
  }

  function getRegionBadge(gameId) {
    const regionCode = gameId.substring(3, 4).toUpperCase();
    switch (regionCode) {
      case "E":
        return "<span class='badge bg-primary' style='font-style: normal;'>NTSC</span> ";
      case "P":
        return "<span class='badge bg-success' style='font-style: normal;'>PAL</span> ";
      case "J":
        return "<span class='badge bg-danger' style='font-style: normal;'>NTSC-J</span> ";
      case "K":
        return "<span class='badge bg-warning' style='font-style: normal;'>NTSC-K</span> ";
      default:
        return "";
    }
  }
</script>

<style>
  #game-search-online {
    width: calc(100% - 53px);
    transform: translate(-26.5px, 0);
    height: 50px;
    padding: 10px;
    border-radius: 8px;
    color: white;
    border: 2px solid #ffffff10;
    background-color: rgba(23, 23, 23, 0.965);
    -webkit-backdrop-filter: blur(8px);
    backdrop-filter: blur(8px);
    z-index: 100;
    position: relative;
  }
  input {
    transition: 0.2s;
  }
  input:focus {
    outline: none;
    box-shadow: 0px 0px 20px #ffffff0b;
    border: none;
    transition: 0.2s;
  }
  #suggestions-online {
    max-height: 0px;
    width: 100%;
    transform: translate(0, -8px);
    resize: vertical;
    padding-top: 5px;
    background-color: rgb(23, 23, 23);
    border-radius: 8px;
    border-top-left-radius: 0px;
    border-top-right-radius: 0px;
    border: 2px solid #ffffff10;
    border-top: 0px;
    z-index: 10000;
    visibility: hidden;
    overflow-y: hidden;
    position: absolute;
    transition: max-height 0.3s ease, visibility 0.3s ease;
  }
</style>