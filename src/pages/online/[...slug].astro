---
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import games from "../../../public/json/pages.json";
import DNSInstructions from "../../components/DNSInstructions.astro";
import { XMLParser } from "fast-xml-parser";

import {
  getIconForGenre,
  getRating,
  getController,
  loadPrerenderImage,
  fetchCompatData,
  getOnlineCompat,
} from "../../../public/js/helper_functions.js";

const response = await fetch("https://wiilink.ca/extras/wiitdb.xml");
const xmlData = await response.text();

const parser = new XMLParser({
  ignoreAttributes: false,
  attributeNamePrefix: "",
});
const jsonData = parser.parse(xmlData);

// Match the game.id with the title
let game = jsonData.datafile.game.find(
  (game) => game.gameId === Astro.props.title
);

// Handle cases where the game is not found
if (!game) {
  // Retry by using the gamespyId
  game = jsonData.datafile.game.find(
    (game) => game.id === Astro.props.gamespyId
  );

  if (!game) {
    // If the game is still not found, return a 404 response
    return new Response(null, {
      status: 404,
      headers: {
        Location: "/404", // Redirect to your custom 404 page
      },
    });
  }
}

export async function getStaticPaths() {
  return games.map((data) => ({
    params: {
      slug: data.gameId,
    },
    props: {
      title: data.gameId,
      text: data.gameName,
      gamespyId: data.gamespyId,
    },
  }));
}
let { title, text, gamespyId } = Astro.props;

// Merge the "games" json with the "game" json if patchId exists on the pages.json for the game (we need to match game.id with gameId on the pages.json), if patches exist, we will add them to the game object in the wi-fi object as "patches"
if (game) {
  const titlestuff = games.find((game) => game.gameId === title).gameId;
  // if (patchId) {
  //   // Add the patches to the game object appending to the root of the game object
  //   game.wifi.patches = patchId;
  //   console.log(patchId);
  //   if (gamespyId) game.wifi.gamespyId = patchId;
  // }
} else {
  // retry by using the gamespyId
  const gameByGamespyId = jsonData.datafile.game.find(
    (game) => game.id === gamespyId
  );
  if (gameByGamespyId) {
    game = gameByGamespyId;
  } else {
    // If the game is not found, return a 404 response
    return new Response(null, {
      status: 404,
      headers: {
        Location: "/404", // Redirect to your custom 404 page
      },
    });
  }
}

// Resolve the image URL before rendering
const imageUrl =
  game.type === "DS"
    ? `https://art.gametdb.com/ds/coverHQ/US/${game.id}.jpg`
    : await loadPrerenderImage("disc", game.id);

const imageHQUrl =
  game.type === "DS"
    ? `https://art.gametdb.com/ds/coverfullHQ/US/${game.id}.jpg`
    : await loadPrerenderImage("coverfullHQ", game.id);
---

<Layout
  title={`WiiLink WFC - ${text}`}
  description={`${title} - WiiLink Wi-Fi Connection (WWFC) is a brand new service that allows you to play online games with your friends on your Wii!`}
  image="/img/banners/game.png"
>
  <Header hasSearch={true} />
  <DNSInstructions />

  <div class="herobg" id="herobg">
    <div class="bginner">
      <img
        src={imageHQUrl}
        alt={game.locale.title + " Background"}
        style="margin-right:15px;"
        width="100%"
      />
    </div>
  </div>
  <div style="transform:translate(0, 60px);">
    <div
      style="left:50%; width:90%; max-width: 1500px; padding:20px; transform:translate(-50%, 28px);  animation:fadeleft 300ms 0.1s ease-out forwards; opacity:1; position:relative; display:block;"
      id="mobilehide"
    >
      <h1
        style="margin-bottom:38px; width:900px; white-space:nowrap; text-overflow:ellipsis; overflow:hidden; display:flex; flex-direction:row; align-items:center; gap:8px;"
      >
        <img
          src={imageUrl}
          alt={game.locale.title + " Game Disc"}
          style="margin-right:15px; border-radius:8px;"
          width="70px"
        />
        <span>
          <b>{game.locale.title}</b>
          <p
            style="margin-bottom:6px !important; font-weight:normal; width:500px; font-size:18px; opacity:0.5;"
          >
            <span id="gamespyId">{title}</span> | {game.id.substring(0, 3)}
          </p>
        </span>
      </h1>
    </div>
    <div class="data-holder" id="errnomatch">
      <div
        id="img"
        style="animation: fadein 200ms ease-in-out forwards; opacity: 0;"
      >
        <div class={`${game.type === "DS" ? "dscoverimg" : "coverimg"}`}>
          <img
            src={imageHQUrl}
            alt={game.locale.title + " Game Boxart"}
            class={`${game.type === "DS" ? "dsimginner" : "imginner"}`}
            onerror="this.style.display='none';"
          />
        </div>
      </div>
      <div id="data" style="width:100%; position:relative;">
        <div
          class="smalldatapill"
          style="${display}; animation: fadein 200ms ease-in-out forwards; opacity:0;"
        >
          <l
            id="extradata"
            title="${extraDataTitle}"
            style="grid-column: auto / span 5; white-space:nowrap; text-overflow:ellipsis; overflow:hidden;"
            ><i class="fa-solid fa-compact-disc"></i> {game.name}</l
          >
          <l
            title={game.developer + " | " + game.publisher}
            id="publisher"
            style="grid-column: auto / span 3; white-space:nowrap; text-overflow:ellipsis; overflow:hidden; position:relative;"
            ><i class="fa-solid fa-file-code"></i>
            {game.developer} | {game.publisher}</l
          >
          <l style="grid-column: auto / span 2;"
            ><i class="fa-solid fa-earth-americas"></i> {game.region}</l
          >
          <l
            title={game.languages}
            style="grid-column: auto / span 3; white-space:nowrap; text-overflow:ellipsis; overflow:hidden; position:relative;"
            ><i class="fa-solid fa-language"></i> {game.languages}</l
          >
          <l style="grid-column: auto / span 3;"
            ><i class="fa-solid fa-calendar"></i>
            {game.date.day}/{game.date.month}/{game.date.year}</l
          >
        </div>
        <div
          class="bigdatapill sizeFix"
          style="margin-top: 18px; animation: fadein 200ms ease-in-out forwards; opacity:0;"
        >
          <l
            class="genre extraDisplay size1"
            style="border:2px solid #4287f520; display:flex; flex-direction:column; align-items:center; justify-content:center;"
            ><div
              class="macremove"
              style="color:#4287f5; bottom:-50px; left:-20px; opacity:0.1; text-transform:uppercase; font-family:Gilroy; font-size:100px;position:absolute;"
            >
              Genre
            </div>
            <span
              set:html={(game.genre || "Unknown")
                .split(",")
                .map((genre) => {
                  return (
                    "<i class='fas " +
                    getIconForGenre(genre) +
                    "'></i> " +
                    genre.charAt(0).toUpperCase() +
                    genre.slice(1) +
                    "<br>"
                  );
                })
                .join("")}
            /></l
          >
          <l
            class="rating"
            style="border:2px solid #42f55d20; grid-column: auto / span 2; grid-row: auto / span 2; ${display}"
          >
            <div
              class="macremove"
              style="color:#42f55d; bottom:-50px; left:-20px; opacity:0.1; text-transform:uppercase; font-family:Gilroy; font-size:100px;position:absolute;"
            >
              {game.rating?.type || "No Rating"}
            </div>
            <span
              set:html={game.rating
                ? getRating(game.rating.value, game.rating.rating)
                : "No rating available"}
            />
          </l>
          <l
            id="onlinemobile"
            class="size2"
            style="min-height:250px; border:2px solid #dd42f520; display:flex; justify-content:center; align-items:center; position:relative;"
            ><div
              class="macremove"
              style="color:#dd42f5; bottom:-50px; left:-20px; opacity:0.1; text-transform:uppercase; font-family:Gilroy; font-size:100px; position:absolute;"
            >
              WI-FI
            </div><b id="WFCdetails" style="width:100%; max-width:330px;"
              ><img
                src="/img/loading.gif"
                id="onlineload"
                style="left:50%; transform:translate(-50%, 0); filter:brightness(100000000); display:none; position:relative;"
                width="30px"
              /></b
            >
            <div
              id="onlineplaycontainer"
              style="top:20px; display:flex; align-items:center; justify-content:center; position:absolute;"
            >
              <b id="onlineplayno" style="font-size:30px; margin-right:18px;"
                >{game.wifi.players}</b
              ><b
                id="wifino"
                set:html={// For all players, add a user icon
                Array.from({ length: game.wifi.players }).map((_) => {
                  return "<i class='fa fa-user' style='margin-right:8px;'></i>";
                })}
              />
              <span
                set:html={getOnlineCompat(
                  game.id,
                  game.wifi.players,
                  game.wifi.feature
                ) != 1 &&
                  getOnlineCompat(
                    game.id,
                    game.wifi.players,
                    game.wifi.feature
                  )}
              />
            </div>
            <d style="bottom:20px; lext-align:left; position:absolute;">
              {
                game.wifi.feature &&
                  (Array.isArray(game.wifi.feature)
                    ? game.wifi.feature
                    : [game.wifi.feature]
                  ).join(" | ")
              }
            </d></l
          >
          <l
            class="size3"
            style="border:2px solid #dd42f520; display:flex; justify-content:center; align-items:center;"
          >
            <div
              class="macremove"
              style="color:#dd42f560; bottom:-50px; left:-20px; opacity:0.2; text-transform:uppercase; font-family:Gilroy; font-size:100px;position:absolute;"
            >
              Players
            </div>
            <b style="font-size:30px; margin-right:18px;">
              {
                game.type === "DS"
                  ? game.input["players-single-cart"]
                  : game.input.players
              }
            </b>
            <b style="display:flex; flex-direction:row; gap:3px;">
              {
                Array.from({
                  length:
                    game.type === "DS"
                      ? game.input["players-single-cart"]
                      : game.input.players,
                }).map((_) => <i class="fa-solid fa-user" />)
              }
            </b>
          </l>
          {
            game.type === "DS" ? (
              <l class="size4" style="border:2px solid #ffffff20;">
                <div
                  class="macremove"
                  style="bottom:-50px; left:-20px; opacity:0.03; text-transform:uppercase; font-family:Gilroy; font-size:100px;position:absolute;"
                >
                  Controllers
                </div>
                <br />
                <span>
                  <img
                    src="/img/controllers/nintendods.svg"
                    alt="DS Controller"
                    style="width:50px; height:auto; transform:translate(0, -10px); filter:invert(1);"
                  />
                </span>
              </l>
            ) : (
              <l class="size4" style="border:2px solid #ffffff20;">
                <div
                  class="macremove"
                  style="bottom:-50px; left:-20px; opacity:0.03; text-transform:uppercase; font-family:Gilroy; font-size:100px;position:absolute;"
                >
                  Controllers
                </div>
                <br />
                <span
                  set:html={(Array.isArray(game.input.control)
                    ? game.input.control
                    : [game.input.control]
                  ).map((controller) => {
                    return getController(controller);
                  })}
                />
              </l>
            )
          }
        </div>
      </div>
    </div>

    {
      getOnlineCompat(game.id, game.wifi.players, game.wifi.feature) == 1 && (
        <>
          <div id="onlinecontainer">
            <div id="containerdata" />
            <div style="color:#4287f5; bottom:-50px; left:-20px; opacity:0.1; text-transform:uppercase; font-family:Gilroy; font-size:100px; position:absolute;">
              Statistics
            </div>
          </div>
          <div style="width:90%;  max-width:1500px; left:50%; transform:translate(-50%, 0); display:flex; justify-content:space-between; z-index:1000; position:relative;">
            <div
              id="onlineSpecialInfo"
              style="display:flex; flex-direction: row; align-items: center; gap:8px;"
            >
              <div
                id="dropupcompat"
                class="btn-group dropup"
                data-bs-toggle="tooltip"
                data-bs-placement="bottom"
                data-bs-title="Compatibility information"
                style="display: none;"
              >
                <button
                  type="button"
                  class="btn btn-dark dropdown-toggle"
                  data-bs-toggle="dropdown"
                  aria-expanded="false"
                >
                  <i class="fa fa-circle-question"></i>
                </button>
                <ul
                  id="compat"
                  style="width:240px; padding:8px; z-index:100000; position:relative;"
                  class="dropdown-menu"
                ></ul>
              </div>
              {game.patchId && game.patchId.length > 0 && (
                <div id="dropup" class="btn-group dropup">
                  <button
                    type="button"
                    class="btn btn-success dropdown-toggle"
                    data-bs-toggle="dropdown"
                    aria-expanded="false"
                  >
                    <i class="fa fa-download" style="margin-right:5px;" />{" "}
                    Download patches
                  </button>
                  {game.patchId && game.patchId.length > 0 && (
                    <ul
                      id="downloadPatchButton"
                      style="z-index:100000; position:relative;"
                      class="dropdown-menu"
                    >
                      {game.type === "DS" ? (
                        // Show a warning for DS games
                        <span style="width: 300px; margin-left:18px; margin-right:18px; display:block; position:relative;">
                          <i
                            class="fa fa-exclamation-triangle"
                            style="margin-right:8px;"
                          />
                          This game (and all DS games) only requires a change in DNS settings to
                          work. No additional patches are needed.
                        </span>
                      ) : Array.isArray(game.patchId) &&
                        game.patchId.length > 0 ? (
                        game.patchId.map((patch) => {
                          let patchRegion = "Unknown";
                          let patchEmoji = "🌍";

                          // Determine the region and emoji based on the 4th character of the patch ID
                          switch (patch.charAt(3)) {
                            case "E":
                              patchRegion = "NTSC-U";
                              patchEmoji = "🇺🇸";
                              break;
                            case "P":
                              patchRegion = "PAL";
                              patchEmoji = "🇪🇺";
                              break;
                            case "J":
                              patchRegion = "NTSC-J";
                              patchEmoji = "🇯🇵";
                              break;
                            case "K":
                              patchRegion = "NTSC-K";
                              patchEmoji = "🇰🇷";
                              break;
                          }

                          return (
                            <li style="cursor:pointer; display:flex; flex-direction:row; align-items:center; gap:8px; padding:6px; border-radius:8px; color:black;">
                              <div
                                class="dropdown-item"
                                style="display:flex; gap:8px; flex-direction:row; justify-content:space-between;"
                              >
                                <p
                                  style="margin-bottom:0; color:black !important;"
                                  onclick={`downloadGCT("${patch}", "/patches/${patch}.txt")`}
                                >
                                  {patchEmoji} {patch.slice(0, 4)}
                                  {patch.slice(5)} ({patchRegion})
                                </p>
                                <div>
                                  <span
                                    class="badge"
                                    style="font-size:15px; color:black; background-color:#00000010; font-weight:normal; transition:0.1s;"
                                    onclick={`downloadGCT("${patch}", "/patches/${patch}.txt")`}
                                  >
                                    .gct
                                  </span>
                                  <a
                                    href={`/patches/${patch}.txt`}
                                    style="text-decoration:none;"
                                    download
                                  >
                                    <span
                                      class="badge"
                                      style="font-size:15px; color:black; background-color:#00000010; font-weight:normal; transition:0.1s;"
                                    >
                                      .txt
                                    </span>
                                  </a>
                                </div>
                              </div>
                            </li>
                          );
                        })
                      ) : (
                        <span style="width:300px; margin-left:18px; margin-right:18px; position:relative; display:block;">
                          <i
                            class="fa fa-exclamation-triangle"
                            style="margin-right:8px;"
                          />
                          No patches available for this game.
                        </span>
                      )}
                      <hr style="margin:8px 0;" />
                      {
                        game.gameId === 'mariokartwii' && (
                          <button style="width:calc(100% - 12px); margin:6px; padding:6px; background-color:rgb(58, 170, 48); color:white !important; border:0px; border-radius:8px; position:relative;" onclick="openDNSInstructions();">
                            DNS Patching Guide
                          </button>
                          <hr style="margin:8px 0;" />
                        )
                      }
                      <li style="transform:translate(15px, 0); margin-top:5px; font-size:15px; opacity:0.5;">
                        <i class="fa fa-circle-info" /> These patches are{" "}
                        <u>gecko codes</u>
                        <br style="margin-bottom:8px;" />
                        <a href="/setup" style="text-decoration:none;">
                          <i class="fa fa-circle-question" /> How do I install?
                        </a>
                      </li>
                    </ul>
                  )}
                </div>
              )}
            </div>
            <p style="text-align: right; filter:opacity(0.3) brightness(10000); position:relative;">
              Data provided by{" "}
              <a
                href={`https://www.gametdb.com/wii/${gamespyId ? gamespyId : title}`}
              >
                GameTDB
              </a>{" "}
              and WiiLink Violet API.
            </p>
          </div>
        </>
      )
    }
    <div
      style="width:90%; max-width:1500px; left:50%; transform:translate(-50%, 0); margin-bottom:200px; animation:fadein 200ms linear forwards; opacity:1; display:block; position:relative;"
      id="errhide"
    >
      <h1 style="font-family:Gilroy; margin-top:50px; margin-bottom:20px;">
        About the game:
      </h1>
      <p id="synopsis" style="font-size:20px;">
        {
          game.locale.synopsis
            ? game.locale.synopsis
            : "No synopsis available. You can help by submitting one to GameTDB!"
        }
      </p>
    </div>
  </div>
  <Footer />

  <span id="onlineCompat" style="display: none;">
    {getOnlineCompat(game.id, game.wifi.players, game.wifi.feature)}
  </span>

  <script type="module" define:vars={{ game }}>
    import { fetchCompatData } from "/js/helper_functions.js";
    import { getPreferredStyle } from "/js/helper_functions.js";
    import { onlineUpdater } from "/js/online_updater.js";

    window.addEventListener("scroll", function () {
      const mainDiv = document.getElementById("herobg");
      const scrollPos = document.documentElement.scrollTop;
      mainDiv.style.transform = `translateY(${scrollPos / 2}px)`;
    });

    function toClipboard(data) {
      navigator.clipboard.writeText(data).then(
        function () {
          alert("Copied the text: " + data);
        },
        function (err) {
          console.error("Could not copy text: ", err);
        }
      );
    }

    document.addEventListener("DOMContentLoaded", function () {
      getPreferredStyle();

      var isSafari =
        /WebKit/.test(navigator.userAgent) &&
        !/Chrome/.test(navigator.userAgent);

      if (isSafari) {
        setTimeout(function () {
          var elements = document.getElementsByClassName("macremove");
          for (var i = 0; i < elements.length; i++) {
            elements[i].innerHTML = "";
          }
        }, 300);
      }

      const onlineCompat = document.getElementById("onlineCompat").innerText;
      const gamespyId = document.getElementById("gamespyId").innerText;
      if (parseInt(onlineCompat) == 1) {
        onlineUpdater(gamespyId);
        setInterval(function () {
          onlineUpdater(gamespyId);
        }, 30000);
      }
    });

    function getCompatStatus(status) {
  switch (status) {
    case "Not tested":
      return `<i class='fa fa-circle-question' style='color:gray;'></i> ${status}`;
    case "Gameplay works":
      return `<i class='fa fa-circle-check' style='color:green;'></i> ${status}`;
    case "Login fail":
      return `<i class='fa fa-circle-exclamation' style='color:red;'></i> ${status}`;
    case "Error 20910":
      return `<i class='fa fa-circle-exclamation' style='color:red;'></i> ${status}`;
    case "Fully working":
      return `<i class='fa fa-circle-check' style='color:green;'></i> ${status}`;
    default:
      return `<i class='fa fa-circle-question' style='color:gray;'></i> ${status}`;
  }
}

    // Function to render compatibility data
    function renderCompatData(compatData) {
      const dropupCompat = document.getElementById("dropupcompat");
      const compatList = document.getElementById("compat");

      if (compatData && compatData.length > 0) {
        // Show the dropdown if there is compatibility data
        dropupCompat.style.display = "block";

        // Clear existing content
        compatList.innerHTML = "";

        // Populate the compatibility data
        compatData.forEach((data) => {
          const listItem = document.createElement("li");

          // Add the status icon and text
          const status = document.createElement("center");
          status.innerHTML = getCompatStatus(data[1]);
          listItem.appendChild(status);

          // Add the description
          const description = document.createElement("div");
          description.style =
            "width:100%; margin-top:8px; padding:8px; background-color:#00000010; border-radius:4px; position:relative;";
          description.textContent = data[2];
          listItem.appendChild(description);

          compatList.appendChild(listItem);
        });
      }
    }

    async function loadCompatData() {
    try {
      const compatData = await fetchCompatData(game.id.substring(0,3));

      renderCompatData(compatData);
    } catch (error) {
      console.error("Error loading compatibility data:", error);
    }
  }

  document.addEventListener("DOMContentLoaded", function () {
    loadCompatData();
  });
  </script>

  <script is:inline>
    function downloadGCT(gameId, fileUrl) {
      fetch(fileUrl)
        .then((response) => {
          if (!response.ok) {
            throw new Error("Network response was not ok");
          }
          return response.text();
        })
        .then((code) => {
          var gctArray = [0x00, 0xd0, 0xc0, 0xde, 0x00, 0xd0, 0xc0, 0xde];
          var byteCode = codeToHex(code);
          if (!byteCode) return;

          gctArray = gctArray.concat(byteCode);
          gctArray.push(0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);

          var byteArray = new Uint8Array(gctArray);
          var blob = new Blob([byteArray], {
            type: "application/octet-stream",
          });
          var url = window.URL.createObjectURL(blob);
          var link = document.createElement("a");
          link.href = url;
          // Remove 5th letter from gameId
          gameId = gameId.slice(0, 4) + gameId.slice(5);
          link.download = gameId + ".gct";
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        })
        .catch((error) => {
          console.error("Error fetching the file:", error);
        });
    }

    function codeToHex(code) {
      var curatedCode = code.replace(/\s+/g, "");
      if (
        curatedCode.length === 0 ||
        !/^[0-9A-Fa-f]*$/.test(curatedCode) ||
        curatedCode.length % 16 !== 0
      ) {
        alert("Invalid code format.");
        return false;
      }
      var byte_array = [];
      for (var i = 0; i < curatedCode.length; i += 2) {
        var byte = parseInt(curatedCode.substring(i, i + 2), 16);
        byte_array.push(byte);
      }
      return byte_array;
    }
  </script>

  <style>
    html body {
      background-color: rgb(11, 0, 0);
    }
    h1 {
      color: white;
    }
    p {
      color: white;
    }
    .herobg {
      background: linear-gradient(
          to bottom,
          rgba(11, 0, 0, 0) 0%,
          rgba(11, 0, 0, 1) 80%
        ),
        url("/img/bg.png");
      opacity: 0.5;
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      animation: changecolor 10s infinite;
      width: 100%;
      height: 100vh;
      transform: translate(0, 0px);
      animation: fadeinopaque 2000ms ease-in-out forwards;
      position: absolute;
      z-index: -10;
      overflow: hidden;
    }

    #img {
      height: 440px;
      background-color: #151414;
      border-radius: 8px;
      background-image: url("/img/bg.png");
      background-size: cover;
      position: relative;
    }

    .customhover {
      background: -webkit-linear-gradient(#fff, #fff);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      transition: 0.3s;
    }

    .customhover:hover {
      background: -webkit-linear-gradient(#6cb3ff, #d4e976);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      scale: 1.1;
      transform: rotate(5deg);
      transition: 0.3s;
    }

    #onlinecontainer {
      left: 50%;
      transform: translate(-50%, 0);
      width: 90%;
      height: auto;
      min-height: 300px;
      max-width: 1500px;
      border-radius: 8px;
      border: 2px solid #4287f530;
      margin-bottom: 20px;
      background-color: #151414d8;
      padding: 20px;
      display: none;
      overflow: hidden;
      position: relative;
    }

    .data-holder {
      left: 50%;
      transform: translate(-50%, 0);
      width: 90%;
      max-width: 1500px;
      margin-bottom: 18px;
      display: flex;
      gap: 20px;
      position: relative;
    }

    .herobg::after {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      height: 100%;
      width: 100%;
      background: linear-gradient(
        to bottom,
        rgba(11, 0, 0, 0) 0%,
        rgba(11, 0, 0, 1) 80%
      );
      pointer-events: none;
    }

    .dropup .dropdown-toggle::after {
      display: none;
    }

    #imgCaroussel {
      left: 50%;
      width: 100%;
      height: 300px;
      width: 100%;
      transform: translate(-50%, 0);
      border-radius: 8px;
      display: flex;
      overflow-y: hidden;
      overflow-x: scroll;
      scroll-snap-type: x proximity;
      position: relative;
    }
  </style>

  <style is:global>
    .coverimg {
      height: 440px;
      width: 310px;
      border-radius: 8px;
      overflow: hidden;
      transition: 0.3s;
    }
    .coverimg:hover {
      transform: scale(1.03);
      box-shadow: 0px 0px 20px 0px #ffffff10;
      transition: 0.3s;
    }
    .dscoverimg {
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      height: 300px;
      aspect-ratio: 1/1;
      border-radius: 8px;
      overflow: hidden;
      transition: 0.3s;
      box-shadow: 0px 0px 20px 0px #ffffff30;
      position: relative;
    }
    li span:hover {
      background-color: #00000030 !important;
      transition: 0.1s;
    }
    #mobileinner {
      transform: scale(1);
      transition: 0.2s;
    }
    #mobileinner:hover {
      transform: scale(1.03);
      box-shadow: 0px 0px 20px 0px #ffffff05;
      transition: 0.3s;
    }
    #card-bg {
      width: 100%;
      transform: translate(0, -50%);
      filter: blur(8px) opacity(0.1) grayscale(0.7);
      position: absolute;
      transition: 0.3s;
    }
    .recommended-title:hover #card-bg {
      filter: blur(8px) opacity(0.2) grayscale(0.3);
      transition: 0.3s;
    }
    .recommended-title {
      color: white;
      background-color: #ffffff10;
      border: 2px solid #ffffff20;
      border-radius: 8px;
      overflow: hidden;
      position: relative;
      transition: 0.3s;
    }
    .recommended-title:hover {
      transform: scale(1.03);
      box-shadow: 0px 0px 20px 0px #ffffff10;
      border: 2px solid #ffffff60;
      transition: 0.3s;
    }
    .img-bg {
      transform: scale(110%);
      filter: blur(8px) opacity(0.1) grayscale(0.7);
      position: absolute;
      transition: 0.3s;
    }
    .recommended-title:hover .img-bg {
      filter: blur(8px) opacity(0.2) grayscale(0.3);
      transition: 0.3s;
    }
    #recommendedTitles {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      position: relative;
    }
    .imginner {
      height: 440px;
      transform: translate(-53.1%, 0);
      color: white;
      transition: 0.5s;
      overflow: hidden;
    }
    .dsimginner {
      height: 300px;
      aspect-ratio: 20/9.3;
      transform: translate(-53.1%, 0);
      color: white;
      transition: 0.5s;
      overflow: hidden;
    }
    l {
      height: 100%;
      background-color: #151414d8;
      border: 2px solid #272525;
      border-radius: 8px;
      text-align: center;
      padding: 10px;
      padding-left: 18px;
      padding-right: 18px;
      backdrop-filter: blur(0px);
      -webkit-backdrop-filter: blur(0px);
      box-shadow: 0px 0px 20px 0px #62626210;
      overflow: hidden;
      transition: 0.3s;
    }
    l:hover {
      transform: scale(1.01);
      transition: 0.3s;
    }
    .smalldatapill {
      width: 100%;
      justify-content: center;
      align-items: center;
      color: white;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(55px, 1fr));
      gap: 15px;
      position: relative;
    }
    .bigdatapill {
      width: 100%;
      justify-content: center;
      align-items: center;
      color: white;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(70px, 1fr));
      gap: 15px;
      position: relative;
    }
    .bginner {
      top: 0;
      left: 0;
      width: 100%;
      filter: blur(16px) grayscale(0);
      opacity: 0.3;
      position: absolute;
      transform: scale(1.3);
    }
    .coverimg:hover .imginner {
      transform: translate(-0.7%, 0);
      transition: 0.5s;
    }

    .dscoverimg:hover .dsimginner {
      transform: translate(-0.7%, 0);
      transition: 0.5s;
    }
    @media only screen and (max-width: 1500px) {
      .genre {
        grid-column: auto / span 6 !important;
      }
      .rating {
        grid-column: auto / span 5 !important;
      }
    }

    @media only screen and (max-width: 1390px) {
      .data-holder {
        width: 95% !important;
        flex-direction: column;
      }
      #onlinecontainer {
        width: 95% !important;
      }
      #img {
        width: 100%;
        height: 100%;
        transform: translate(0, 0);
      }
      .coverimg {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        height: 100%;
        position: relative;
      }
      .coverimg:hover {
        transform: translate(-50%, -50%);
        transition: 0.5s;
      }
      .imginner {
        height: 100%;
      }
    }

    @media only screen and (max-width: 1264px) {
      #extradata {
        grid-column: auto / span 14 !important;
      }
      #publisher {
        grid-column: auto / span 6 !important;
      }
    }

    @media only screen and (max-width: 1000px) {
      .data-holder {
        width: 95% !important;
        flex-direction: column;
      }
      #onlinecontainer {
        width: 95% !important;
      }
      #img {
        width: 100%;
        height: 100%;
        transform: translate(0, 0);
      }
      .coverimg {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        height: 100%;
        position: relative;
      }
      .coverimg:hover {
        transform: translate(-50%, -50%);
        transition: 0.5s;
      }
      .imginner {
        height: 100%;
      }
      .smalldatapill {
        display: flex !important;
        flex-wrap: wrap;
      }
      .bigdatapill {
        display: flex;
        flex-wrap: wrap;
      }
      l {
        width: 100%;
      }
      #mobilehide {
        display: none !important;
      }
      #onlinemobile {
        height: 200px;
        position: relative;
      }
      #mobilestats {
        transform: translate(0, 20px);
        width: 100% !important;
        display: flex !important;
        flex-wrap: wrap;
      }
      #recommendedHeader,
      #recommendedTitles {
        opacity: 0;
        display: none;
      }
      #mobileinner {
        width: 100%;
      }
      #data {
        width: 100%;
        transform: translate(0, 0);
      }
      #containerdata {
        width: 100%;
        transform: translate(0, 0);
      }
      #onlinecontainer {
        width: 100%;
        transform: translate(0, 0);
      }
      #synopsis {
        max-height: 300px;
        overflow: scroll;
      }
      #imgCaroussel {
        width: 100%;
        transform: translate(0, 0);
      }
      .coverimg {
        height: 300px;
        width: 210px;
      }
      .imginner {
        height: 300px;
        transform: translate(-53.1%, 0);
      }
      .smalldatapill {
        grid-template-columns: repeat(auto-fit, minmax(45px, 1fr));
      }
      .bigdatapill {
        grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
      }
    }
  </style>
</Layout>
